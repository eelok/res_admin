type Query {
    getUserByID(id: ID!): User
    getAllEducation: [Education]
    getAllHardSkill: [HardSkill]
}

type Mutation {
    createUser(firstName: String!, lastName: String!, email: String!, password: String!): AuthPayload!
    loginUser(email: String!, password: String): AuthPayload!   
    addEducationToUser
    (start: String!, end: String!,
        shortName: String, longName: String,
        division: String, description: String
    ): AddEducatonToUserResponse!
    deleteEducation(id: String!): Boolean
    addHardSkillToUser(title: String!): AddHardSkillResponse!
    deleteHardSkill(id: String): Boolean
}

type Education {
    id: ID!
    start: String!
    end: String!
    shortName: String
    longName: String
    division: String
    description: String
}


type User {
    id: ID!
    firstName: String!
    lastName: String!
    email: String
    password: String!
    getAllHardSkill: [HardSkill]
    getAllEducation: [Education]
}

type UserMutationSersponse {
    code: String!
    sucess: Boolean!
    message: String
}

type AddEducatonToUserResponse {
    code: String!
    sucess: Boolean!
    message: String
}

type AddHardSkillResponse {
    code: String!
    sucess: Boolean!
    message: String
}

type HardSkill {
    id: ID!
    title: String
}


type AuthPayload {
    token: String!
    user: User!
}
